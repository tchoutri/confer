name: CI

# Trigger the workflow on push or pull request, but only for the main branch
on:
  pull_request:
  push:
    branches: ['main']

jobs:
  generate-matrix:
    name: 'Generate matrix from cabal'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract the tested GHC versions
        id: set-matrix
        uses: kleidukos/get-tested@v0.1.7.1
        with:
          cabal-file: confer.cabal
          ubuntu-version: 'latest'
          macos-version: 'latest'
          version: 0.1.7.1
  tests:
    name: ${{ matrix.ghc }} on ${{ matrix.os }}
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout base repo
        uses: actions/checkout@v4
      - name: "Install tools"
        run: |
            .github/workflows/install-tools.sh
      - name: Set up Haskell
        id: setup-haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 'latest'
      - name: Configure
        run: |
          ARCHITECTURE=$(uname -m)
          echo "ARCH=$ARCHITECTURE" >> $GITHUB_ENV
          echo ${{ env.ARCH }}
          cabal configure --enable-tests
      - name: Freeze
        run: cabal freeze --project-file=cabal.release.project
      - name: Cache
        uses: actions/cache@v4.0.2
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ runner.os }}-ghc-${{ matrix.ghc }}-

      - name: Build
        run: cabal build --project-file=cabal.release.project

      - name: Test
        run: cabal test --project-file=cabal.release.project --test-options "--xml=dist-newstyle/report.xml" all

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: 'dist-newstyle/report.xml'

      - name: Install
        run: cabal install --project-file=cabal.release.project --installdir=distribution --install-method=copy

      - name: File type
        run: file distribution/confer

      - name: Package the confer-head executable
        run: |
          CONFER_EXEC=distribution/confer
          .github/workflows/process-binaries.sh
          DIR=$(dirname $CONFER_EXEC)
          FILE=$(basename $CONFER_EXEC)
          CONFER_EXEC_TAR=confer-head-${{ runner.os }}-${{ env.ARCH }}.tar.gz
          tar -czvf $CONFER_EXEC_TAR -C $DIR $FILE
          echo CONFER_EXEC_TAR=$CONFER_EXEC_TAR >> $GITHUB_ENV
      - name: Upload the confer-head executable
        uses: actions/upload-artifact@v4
        with:
          name: confer-${{ runner.os }}-${{ env.ARCH }}
          path: ${{ env.CONFER_EXEC_TAR }}

  build-alpine:
    name: 9.10.1 on alpine-3.19
    runs-on: ubuntu-latest
    container: 'alpine:3.19'
    needs: generate-matrix
    steps:
      - name: Install extra dependencies
        shell: sh
        run: | 
            apk add bash binutils-gold curl \
                curl file g++ gcc git gmp-dev \
                jq libc-dev libffi-dev make \
                musl-dev ncurses-dev perl pkgconfig \
                sudo tar upx xz zlib-dev zlib-static

      - uses: actions/checkout@v4

      - uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: '9.10.1'
          cabal-version: 'latest'

      - name: Configure
        run: | 
          ARCHITECTURE=$(uname -m)
          echo "ARCH=$ARCHITECTURE" >> $GITHUB_ENV
          echo ${{ env.ARCH }}
          cabal configure --enable-tests

      - name: Freeze
        run: cabal freeze --project-file=cabal.static.project

      - uses: actions/cache@v4
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ runner.os }}-${{ steps.setup.outputs.ghc-version }}-

      - name: Build
        run: cabal build --project-file=cabal.static.project

      - name: Test
        run: cabal test --project-file=cabal.static.project all

      - name: Install
        run: |
          bin=$(cabal -v0 --project-file=cabal.static.project list-bin confer)
          mkdir distribution
          install ${bin} distribution/confer

      - name: File type
        run: file distribution/confer

      - name: Tar cabal head executable
        run: |
          CONFER_EXEC=distribution/confer
          .github/workflows/process-binaries.sh
          DIR=$(dirname $CONFER_EXEC)
          FILE=$(basename $CONFER_EXEC)
          CONFER_EXEC_TAR=confer-head-${{ runner.os }}-static-${{ env.ARCH }}.tar.gz
          tar -czvf $CONFER_EXEC_TAR -C $DIR $FILE
          echo CONFER_EXEC_TAR=$CONFER_EXEC_TAR >> $GITHUB_ENV

      - name: Upload confer executable to workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: confer-${{ runner.os }}-static-x86_64
          path: ${{ env.CONFER_EXEC_TAR }}

  prerelease-head:
    name: Create a GitHub prerelease with the binary artifacts
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: ['tests', 'build-alpine']

    steps:
    - uses: actions/download-artifact@v5
      with:
        pattern: confer-*
        merge-multiple: true

    - name: Create GitHub prerelease
      uses: marvinpinto/action-automatic-releases@v1.2.1
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        automatic_release_tag: confer-head
        prerelease: true
        title: confer-head
        files: |
          confer-head-Linux-x86_64.tar.gz
          confer-head-Linux-static-x86_64.tar.gz
          confer-head-macOS-arm64.tar.gz

    - name: Pre-release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        files: ./out/*
        tag_name: print-api-head
